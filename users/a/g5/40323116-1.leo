<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="amd.20160501215436.2" a="E"><vh>pelican 部份</vh>
<v t="amd.20160501215558.1" a="E"><vh>@path ./../../../</vh>
<v t="amd.20160501223113.1"><vh>@edit README.md</vh></v>
<v t="amd.20160501215634.1" a="E"><vh>@path content/ag5</vh>
<v t="amd.20160501215720.1"><vh>@edit 40323116-20160502.md</vh></v>
<v t="amd.20160501220009.1" a="E"><vh>假如要送到 gh-pages 分支, 使用下列按鈕</vh>
<v t="amd.20160501220009.2"><vh>@button gh-pages pelican</vh></v>
</v>
<v t="amd.20160501220029.1" a="E"><vh>假如要在近端檢視, 使用下列按鈕</vh>
<v t="amd.20160501220029.2"><vh>@button local pelican</vh></v>
</v>
</v>
</v>
</v>
<v t="amd.20160501215545.1" a="E"><vh>wsgi 程式部份</vh>
<v t="amd.20160501221015.1" a="E"><vh>@path ./../../../</vh>
<v t="amd.20160501221001.1" a="E"><vh>@clean myflaskapp.py</vh>
<v t="leo.20160616155712.1"><vh>40323116</vh></v>
<v t="amd.20160501221001.2"><vh>myflaskapp declarations</vh></v>
<v t="amd.20160501221001.3"><vh>index</vh></v>
<v t="amd.20160501221001.4"><vh>user</vh></v>
<v t="amd.20160501221001.5"><vh>red</vh></v>
<v t="amd.20160501221001.6"><vh>guessform</vh></v>
<v t="amd.20160501221001.7"><vh>docheck</vh></v>
<v t="amd.20160501221001.8"><vh>option</vh></v>
<v t="amd.20160501221001.9"><vh>optionaction</vh></v>
<v t="amd.20160501221001.10"><vh>fileaxupload</vh></v>
<v t="amd.20160501221001.11"><vh>fileuploadform</vh></v>
<v t="amd.20160501221001.12"><vh>imageaxupload</vh></v>
<v t="amd.20160501221001.13"><vh>imagefileuploadform</vh></v>
<v t="amd.20160501221001.14"><vh>download</vh></v>
<v t="amd.20160501221001.16"><vh>send_static</vh></v>
<v t="amd.20160501230850.1"><vh>send_blog</vh></v>
<v t="amd.20160501221001.15"><vh>send_images</vh></v>
<v t="amd.20160501225844.1"><vh>send_file</vh></v>
</v>
</v>
<v t="leo.20160502113402.1"><vh>@edit ag5_40323116_task1.py</vh></v>
<v t="leo.20160616155638.1"><vh>w14</vh></v>
</v>
<v t="leo.20160502110937.2" a="E"><vh>Recovered Nodes</vh>
<v t="leo.20160502110937.3"><vh>Recovered node "myflaskapp declarations" from @clean myflaskapp.py</vh>
<v t="leo.20160502110937.4"><vh>old:myflaskapp declarations</vh></v>
<v t="leo.20160502110937.5"><vh>new:myflaskapp declarations</vh></v>
</v>
</v>
<v t="123.20160502235815.2" a="E"><vh>Recovered Nodes</vh>
<v t="123.20160502235815.3"><vh>Recovered node "myflaskapp declarations" from @clean myflaskapp.py</vh>
<v t="123.20160502235815.4"><vh>old:myflaskapp declarations</vh></v>
<v t="123.20160502235815.5"><vh>new:myflaskapp declarations</vh></v>
</v>
</v>
<v t="leo.20160505161227.2" a="E"><vh>Recovered Nodes</vh>
<v t="leo.20160505161227.3"><vh>Recovered node "myflaskapp declarations" from @clean myflaskapp.py</vh>
<v t="leo.20160505161227.4"><vh>old:myflaskapp declarations</vh></v>
<v t="leo.20160505161227.5"><vh>new:myflaskapp declarations</vh></v>
</v>
</v>
<v t="leo.20160505172115.2" a="E"><vh>Recovered Nodes</vh>
<v t="leo.20160505172115.3"><vh>Recovered node "myflaskapp declarations" from @clean myflaskapp.py</vh>
<v t="leo.20160505172115.4"><vh>old:myflaskapp declarations</vh></v>
<v t="leo.20160505172115.5"><vh>new:myflaskapp declarations</vh></v>
</v>
</v>
<v t="leo.20160509101318.2" a="E"><vh>Recovered Nodes</vh>
<v t="leo.20160509101318.3"><vh>Recovered node "myflaskapp declarations" from @clean myflaskapp.py</vh>
<v t="leo.20160509101318.4"><vh>old:myflaskapp declarations</vh></v>
<v t="leo.20160509101318.5"><vh>new:myflaskapp declarations</vh></v>
</v>
<v t="leo.20160509101318.6"><vh>Recovered node "imageaxupload" from @clean myflaskapp.py</vh>
<v t="leo.20160509101318.7"><vh>old:imageaxupload</vh></v>
<v t="leo.20160509101318.8"><vh>new:imageaxupload</vh></v>
</v>
<v t="leo.20160509101318.9"><vh>Recovered node "imagefileuploadform" from @clean myflaskapp.py</vh>
<v t="leo.20160509101318.10"><vh>old:imagefileuploadform</vh></v>
<v t="leo.20160509101318.11"><vh>new:imagefileuploadform</vh></v>
</v>
<v t="leo.20160509101318.12"><vh>Recovered node "send_images" from @clean myflaskapp.py</vh>
<v t="leo.20160509101318.13"><vh>old:send_images</vh></v>
<v t="leo.20160509101318.14"><vh>new:send_images</vh></v>
</v>
<v t="leo.20160509101318.15"><vh>Recovered node "send_static" from @clean myflaskapp.py</vh>
<v t="leo.20160509101318.16"><vh>old:send_static</vh></v>
<v t="leo.20160509101318.17"><vh>new:send_static</vh></v>
</v>
<v t="leo.20160509101318.18"><vh>Recovered node "send_blog" from @clean myflaskapp.py</vh>
<v t="leo.20160509101318.19"><vh>old:send_blog</vh></v>
<v t="leo.20160509101318.20"><vh>new:send_blog</vh></v>
</v>
<v t="leo.20160509101318.21"><vh>Recovered node "send_file" from @clean myflaskapp.py</vh>
<v t="leo.20160509101318.22"><vh>old:send_file</vh></v>
<v t="leo.20160509101318.23"><vh>new:send_file</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="123.20160502235815.2"></t>
<t tx="123.20160502235815.3">(uncached) amd.20160501221001.2
Diff...
  # coding: utf-8
  from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
  import random
  import math
  import os
  # init.py 為自行建立的起始物件
  import init
  
+ 
- import users.a.g10.ag10_40323139
?                 ^^   ^^        ^
+ import users.a.g8.ag8_40323131_task1
?                 ^   ^        ^^^^^^^
  # 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
  _curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
  # 設定在雲端與近端的資料儲存目錄
  if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
      # 表示程式在雲端執行
      data_dir = os.environ['OPENSHIFT_DATA_DIR']
      static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
      download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
  else:
      # 表示程式在近端執行
      data_dir = _curdir + "/local_data/"
      static_dir = _curdir + "/static"
      download_dir = _curdir + "/local_data/downloads/"
  
  # 利用 init.py 啟動, 建立所需的相關檔案
  initobj = init.Init()
  
  # 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
  app = Flask(__name__)
  #app.config['download_dir'] = download_dir
  
  # 使用 session 必須要設定 secret_key
  # In order to use sessions you have to set a secret key
  # set the secret key.  keep this really secret:
  app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'
  
  
  
  
  
  
  
- 
</t>
<t tx="123.20160502235815.4"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import math
import os
# init.py 為自行建立的起始物件
import init


import users.a.g8.ag8_40323131_task1
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
#app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'







</t>
<t tx="123.20160502235815.5"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import math
import os
# init.py 為自行建立的起始物件
import init

import users.a.g10.ag10_40323139
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
#app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'








</t>
<t tx="amd.20160501215436.2"></t>
<t tx="amd.20160501215545.1"></t>
<t tx="amd.20160501215558.1"></t>
<t tx="amd.20160501215634.1"></t>
<t tx="amd.20160501220009.1"></t>
<t tx="amd.20160501220009.2">@language python
import os
#os.system("pelican content -o ./ -s publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s publishconf.py")
g.es("admin pelican 執行完畢")

</t>
<t tx="amd.20160501220029.1"></t>
<t tx="amd.20160501220029.2">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="amd.20160501221001.1">@language python
@tabwidth -4
@others
if __name__ == "__main__":
    app.run()

</t>
<t tx="amd.20160501221001.10">@app.route('/fileaxupload', methods=['POST'])
# ajax jquery chunked file upload for flask
def fileaxupload():
    '''
    if not session.get('logged_in'):
        #abort(401)
        return redirect(url_for('login'))
    '''
    # need to consider if the uploaded filename already existed.
    # right now all existed files will be replaced with the new files
    filename = request.args.get("ax-file-name")
    flag = request.args.get("start")
    if flag == "0":
        file = open(data_dir+"downloads/"+filename, "wb")
    else:
        file = open(data_dir+"downloads/"+filename, "ab")
    file.write(request.stream.read())
    file.close()
    return "files uploaded!"

    
    
</t>
<t tx="amd.20160501221001.11">@app.route('/fileuploadform')
def fileuploadform():
    '''
    if not session.get('logged_in'):
        #abort(401)
        return redirect(url_for('login'))
    '''
    return "&lt;h1&gt;file upload&lt;/h1&gt;"+'''
  &lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script&gt;
  $(document).ready(function(){
  $('.prova').axuploader({url:'fileaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','swf'],
  finish:function(x,files)
{
    alert('All files have been uploaded: '+files);
},
  enable:true,
  remotePath:function(){
  return 'downloads/';
  }
  });
  });
  &lt;/script&gt;
  &lt;div class="prova"&gt;&lt;/div&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
  &lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
  '''
</t>
<t tx="amd.20160501221001.12"></t>
<t tx="amd.20160501221001.13"></t>
<t tx="amd.20160501221001.14">@app.route('/downloads/&lt;path:filename&gt;', methods=['GET', 'POST'])
def download(filename):
    #return send_from_directory(download_dir, filename=filename, as_attachment=True)
    return send_from_directory(download_dir, filename=filename)
    


</t>
<t tx="amd.20160501221001.15"># 註冊各組的程式 (第3步/總共3步, 前面1步為 import ag1)
# 以下依照班別與組別次序註冊藍圖
# 二甲
# 註冊 ag100 的 scrum1_task1.py 檔案中的 scrum1_task1 藍圖
</t>
<t tx="amd.20160501221001.16">app.register_blueprint(users.s2a.g100.scrum1_task1.scrum1_task1)
# 註冊 ag100 的 scrum2_task1.py 檔案中的 scrum2_task1 藍圖
app.register_blueprint(users.s2a.g100.scrum2_task1.scrum2_task1)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g3
</t>
<t tx="amd.20160501221001.2"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import math
import os
# init.py 為自行建立的起始物件
import init

# 導入各組的程式 (第2步/總共3步, 前面1步利用 Blueprint 建立於 users 目錄下的 task0.py 中的連結對應方法)
# 以下依照班別與組別導入模組
# 二甲
# 導入 ag100 所屬的模組
import users.s2a.g100.scrum1_task1
import users.s2a.g100.scrum2_task1
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g3
import users.s2a.g3.scrum1_task40123254
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g6
import users.s2a.g6.ag6
import users.s2a.g6.ag6_40323112_task1
import users.s2a.g6.ag6_40323133_task1
import users.s2a.g6.ag6_40323147_task1
import users.s2a.g6.ag6_40323152_task1
import users.s2a.g6.ag6_40323155_task1
import users.s2a.g6.ag6_40323156_task1
#g8
import users.s2a.g8.ag8_40323131_task1
import users.s2a.g8.ag8_40323123_task1
import users.s2a.g8.ag8_40323145_task1
import users.s2a.g8.ag8_40323154_task1
import users.s2a.g8.ag8_40323143_task1
import users.s2a.g8.ag8_40323137_task1
import users.s2a.g8.ag8
#g9
import users.s2a.g9.ag9
import users.s2a.g9.ag9_40323132_task1
import users.s2a.g9.ag9_40323125_task1
import users.s2a.g9.ag9_40323126_task1
import users.s2a.g9.ag9_40323153_task1
import users.s2a.g9.ag9_40323149_task1
import users.s2a.g9.ag9_40323150_task1
# 二乙
#g1
import s2b_files.task1.g1.task0 as bg1_0
import users.s2b.g1.scrum40123156_task1
import users.s2b.g1.scrum40123126_task1
import users.s2b.g1.scrum40123129_task1
import users.s2b.g1.scrum40123131_task1
import users.s2b.g1.scrum40123133_task1
import users.s2b.g1.scrum40123144_task1
import users.s2b.g1.scrum40123134_task1
import users.s2b.g1.bg1_task1
#g2
import users.s2b.g2.task0
import users.s2b.g2.scrum1_task40123235
import users.s2b.g2.scrum2_task40123202
import users.s2b.g2.scrum2_task40123214
import users.s2b.g2.scrum2_task40123217
import users.s2b.g2.scrum2_task40123226
import users.s2b.g2.scrum2_task40123232
import users.s2b.g2.scrum2_task40123235
import users.s2b.g2.scrum2_task40123244
#g3
import users.s2b.g3.task0
import users.s2b.g3.scrum1_task40123250
import users.s2b.g3.scrum2_task40123224
import users.s2b.g3.scrum2_task40123239
import users.s2b.g3.scrum2_task40123242
import users.s2b.g3.scrum2_task40123250
import users.s2b.g3.scrum3_task40123224
import users.s2b.g3.scrum3_task40123242
import users.s2b.g3.scrum3_task40123250
#g4
import users.s2b.g4.task0
import users.s2b.g4.scrum1_task40323201
import users.s2b.g4.scrum2_task40323202
import users.s2b.g4.scrum3_task40323203
import users.s2b.g4.scrum4_task40323205
import users.s2b.g4.scrum5_task40323208
import users.s2b.g4.scrum6_task40123128
#g5
import users.s2b.g5.task0
import users.s2b.g5.scrum1_task40323204
import users.s2b.g5.scrum2_task40323206
import users.s2b.g5.scrum3_task40323217
import users.s2b.g5.scrum4_task40323251
import users.s2b.g5.scrum5_task40323253
import users.s2b.g5.scrum6_task40323255

#g6
import users.s2b.g6.task0
import users.s2b.g6.scrum1_task40323210
#g7
import users.s2b.g7.task0
import users.s2b.g7.scrum1_task40323212
import users.s2b.g7.scrum2_task40323216
import users.s2b.g7.scrum3_task40323236
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g8
import users.s2b.g8.scrum1_task40323213
import users.s2b.g8.scrum4_task40323237
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g9
import users.s2b.g9.task0
import users.s2b.g9.scrum1_task40323250
import users.s2b.g9.scrum2_task40323218
import users.s2b.g9.scrum3_task40323214
import users.s2b.g9.scrum4_task40323231
import users.s2b.g9.scrum5_task40323230
import users.s2b.g9.scrum6_task40323233
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD

#g10
import users.s2b.g10.task0
import users.s2b.g10.scrum1_task40328242
import users.s2b.g10.scrum3_task40323222

#g11
import users.s2b.g11.task0
import users.s2b.g11.scrum1_task40323245
import users.s2b.g11.scrum2_task40323223
import users.s2b.g11.scrum3_task40323240
import users.s2b.g11.scrum4_task40323247
import users.s2b.g11.scrum5_task40323252

=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
#app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'







</t>
<t tx="amd.20160501221001.3">@app.route("/")
def index():
    #這是猜數字遊戲的起始表單, 主要在產生答案, 並且將 count 歸零
    # 將標準答案存入 answer session 對應區
    theanswer = random.randint(1, 100)
    thecount = 0
    # 將答案與計算次數變數存進 session 對應變數
    session['answer'] = theanswer
    session['count'] = thecount

    return render_template("index.html", answer=theanswer, count=thecount)
</t>
<t tx="amd.20160501221001.4">@app.route('/user/&lt;name&gt;')
def user(name):
    return render_template("user.html", name=name)
</t>
<t tx="amd.20160501221001.5">@app.route('/red')
def red():
    # 重新導向 google
    return redirect("http://www.google.com")
</t>
<t tx="amd.20160501221001.6">@app.route('/guessform')
def guessform():
    session["count"] += 1
    guess = session.get("guess")
    theanswer = session.get("answer")
    count = session.get("count")
    return render_template("guessform.html", guess=guess, answer=theanswer, count=count)
</t>
<t tx="amd.20160501221001.7">@app.route('/docheck', methods=['POST'])
def docheck():
    # session[] 存資料
    # session.get() 取 session 資料
    # 利用 request.form[] 取得表單欄位資料, 然後送到 template
    guess = request.form["guess"]
    session["guess"] = guess
    # 假如使用者直接執行 doCheck, 則設法轉回根方法
    if guess is None:
        redirect("/")
    # 從 session 取出 answer 對應資料, 且處理直接執行 docheck 時無法取 session 值情況
    try:
        theanswer = int(session.get('answer'))
    except:
        redirect("/")
    # 經由表單所取得的 guess 資料型別為 string
    try:
        theguess = int(guess)
    except:
        return redirect("/guessform")
    # 每執行 doCheck 一次,次數增量一次
    session["count"] += 1
    count = session.get("count")
    # 答案與所猜數字進行比對
    if theanswer &lt; theguess:
        return render_template("toobig.html", guess=guess, answer=theanswer, count=count)
    elif theanswer &gt; theguess:
        return render_template("toosmall.html", guess=guess, answer=theanswer, count=count)
    else:
        # 已經猜對, 從 session 取出累計猜測次數
        thecount = session.get('count')
        return "猜了 "+str(thecount)+" 次, 終於猜對了, 正確答案為 "+str(theanswer)+": &lt;a href='/'&gt;再猜&lt;/a&gt;"
    return render_template("docheck.html", guess=guess)
 
</t>
<t tx="amd.20160501221001.8">@app.route('/option', methods=["GET", "POST"])
def option():
    # 各組選出組長的方式, 若採遞增, 則各組內學號最小者為組長
    option_list1 = ["遞增", "遞減"]
    # 各組組長間的排序定組序, 若採遞增, 則學號最小的組長為第1組
    option_list2 = ["遞增", "遞減"]
    # 電腦教室共有 9 排電腦
    column = 9
    # 加上班級選擇
    option_list3 = ["2a", "2b"]
    # 根據班級的總人數, 以 9 去除, 算出需要排幾列才能夠容納的下, 而且若列數超過 7
    # 表示這些學員必須與其他同組學員共用電腦

    return render_template('option.html', option_list1=option_list1, option_list2=option_list2, option_list3=option_list3, column=column)
</t>
<t tx="amd.20160501221001.9">@app.route('/optionaction', methods=['POST'])
def optionaction():
    # 最後傳回的字串為 out_string
    out_string = ""
    # 程式內需要暫時使用的 tmp_string
    tmp_string = ""
    # 傳回字串中, 用來說明排序原則的 desc_string
    desc_string = ""
    result = []
    group_sorted = []
    num_of_stud = 0
    # 每組至多 7 人
    max_num_in_one_group = 7
    # 電腦教室配置, 共有 9 排
    total_column = 9
    # 上面為相關變數的初始值設定, 以下開始取出 data_a 或 data_b 進行處理, 由 option3 傳回值決定
    if request.form["option3"]  == "2a":
        content = request.form["data_a"]
    else:
        content = request.form["data_b"]
    #result = content.splitlines()
    for line in content.splitlines():
        result.append(list(line.split(",")))
    # i 為行序
    for i in range(len(result)):
        # j 為組員序
        for j in range(len(result[i])):
            tmp_string += result[i][j] + ", "
        out_string += "第" + str(i+1) + "排資料:"+ tmp_string + "&lt;br /&gt;"
        tmp_string = ""
    for i in range(len(result)):
        # 開始進入組內排序, 根據 request.form["option1"]  的值決定遞增或遞減
        if request.form["option1"]  == "遞增":
            group_list = sorted(list(filter(None, result[i])))
        else:
            group_list = sorted(list(filter(None, result[i])), reverse=True)
        group_sorted.append(group_list)
    if request.form["option1"]  == "遞增":
        desc_string += "組內學號最小者為組長."
    else:
         desc_string += "組內學號最大者為組長."
    # 開始進入組間組長學號排序, 根據 request.form["option2"] 的值決定遞增或遞減
    if request.form["option2"]  == "遞增":
        desc_string += "各組長中學號最小者為第1組."
        final_result = sorted(group_sorted)
    else:
        desc_string += "各組長中學號最大者為第1組."
        final_result = sorted(group_sorted, reverse=True)
    out_string += "&lt;br /&gt;" + desc_string + "&lt;br /&gt;"
    # i 為行序
    for i in range(len(final_result)):
        # j 為組員序
        for j in range(len(final_result[i])):
            num_of_stud += 1
            tmp_string += final_result[i][j] + ","
        out_string += "第" + str(i+1) + "組:"+ tmp_string + "&lt;br /&gt;"
        tmp_string = ""
    #return "總共有" + str(i+) + "組"
    # group_num 為總組數
    group_num = i + 1
    # 截至這裡, 已經完成選組長, 以及定組序的工作 ,接下來要排座位, 並且印出座位表
    # 先算每班的總人數
    #return "總共有"+ str(num_of_stud) + "人"
    seat_by_column = []
    for row in range(max_num_in_one_group):
    # 每組最多 7 人
    #for row in range(7):
        # 這裡的 11 為總組數
        #for column in range(11):
        for column in range(group_num):
            # 因為各分組數列的長度並不相同, 但是最長的有 7 位組員, 因此若無法取得的資料 (因為索引超值), 就補上空字串
            try:
                seat_by_column.append(final_result[column][row])
            except:
                seat_by_column.append("")
    # seat_by_column 為去除空白字串前的座位數列
    # 然後利用 filter(None, seat_by_column) 去除空白字串, 就可以得到以 column 為主的座位排序
    seat_by_column = list(filter(None, seat_by_column))
    # 然後每 N 個取為 1 排, 即可得到以排為主的座位序列, 而 N 則視全班人數除以 9, 也就是 total_column 進位決定, 因為共有 9 排
    N = math.ceil(num_of_stud/total_column)
    # for debug
    #return str(num_of_stud) + ":" + str(total_column) + ":" + str(N)
    column_list = [seat_by_column[n:n+N] for n in range(0, len(seat_by_column), N)]
    # 列出每 N 個組員一排的數列 column_list
    # 接下來要納入以排為主的座位
    # 根據 column_list, 建立一個 dictionary, 其中學號為 index, 座位號為對應值
    seat_dict = {}
    for column in range(len(column_list)):
        for i in range(N):
            try:
                seat_dict.update({column_list[column][i]: (column, i)})
            except:
                seat_dict.update({"": ""})
                
    # 開始準備用順序列出學員座號
    # 根據學號, 排序 dictionary 的方法
    import operator
    seat_dict_sort = sorted(seat_dict.items(), key = operator.itemgetter(0), reverse = False)
    # 依照學號順序, 列出座位表
    out_string += "&lt;br /&gt;按照學號次序列出座位表:&lt;br /&gt;&lt;br /&gt;"
    for i in range(1, len(seat_dict_sort)):
        out_string +=  str(i) + ":"+ str(seat_dict_sort[i]) + "&lt;br /&gt;"
    # 結束準備用順序列出學員座號
    # dont know why .reverse() did not work, 只有 [::-1] 可以 reverse list elements
    #g.es(column_list[::-1])

    # 因為經由 zip 逐一重新 transpose 的列資料, 必須配合最大 (也就是總共有 7 列, 也就是 N 的值) 列數補上空白字串 (也就是空位)
    # 所以不能使用 zip, 而必須導入 zip_longest 模組方法
    from itertools import zip_longest
    final_seat = list(zip_longest(*column_list[::-1], fillvalue=""))
    # 列出最後的座位表
    #g.es(final_seat)
    # 最後轉成 html table 標註格式
    out_string += "&lt;br /&gt; &lt;br /&gt;"
    out_string += "&lt;table border='1' width='100%'&gt;"
    out_string += "&lt;tr&gt;&lt;td colspan='9' style='text-align:center'&gt;講台&lt;/td&gt;&lt;/tr&gt;"
    for row in range(len(final_seat)):
        out_string += "&lt;tr&gt;"
        # 因為每一 row 有 9, 也就是 total_column 個位子
        for i in range(total_column):
            try:
                if i%2 != 0:
                    out_string += "&lt;td style='text-align:center'  bgcolor='#FFD78C' height='30'&gt;" + str(final_seat[row][i]) + "&lt;/td&gt;"
                else:
                    out_string += "&lt;td style='text-align:center' height='30'&gt;" + str(final_seat[row][i]) + "&lt;/td&gt;"
            except:
                out_string += "&lt;td&gt;&amp;nbsp;&lt;/td&gt;"
        out_string += "&lt;/tr&gt;"
    out_string += "&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;"
    return out_string
    # 等運算或資料處理結束後, 再將相關值送到對應的 template 進行資料的展示
    #return render_template('optionaction.html', option_list1=option_list1, option_list2=option_list2)
    

</t>
<t tx="amd.20160501221015.1"></t>
<t tx="amd.20160501225844.1">app.register_blueprint(users.s2a.g6.ag6_40323112_task1.ag6_40323112)
app.register_blueprint(users.s2a.g6.ag6_40323133_task1.ag6_40323133)
app.register_blueprint(users.s2a.g6.ag6_40323147_task1.ag6_40323147)
app.register_blueprint(users.s2a.g6.ag6_40323152_task1.ag6_40323152)
app.register_blueprint(users.s2a.g6.ag6_40323155_task1.ag6_40323155)
app.register_blueprint(users.s2a.g6.ag6_40323156_task1.ag6_40323156)
#g8
app.register_blueprint(users.s2a.g8.ag8_40323145_task1.ag8_40323145)
app.register_blueprint(users.s2a.g8.ag8_40323123_task1.ag8_40323123)
app.register_blueprint(users.s2a.g8.ag8_40323131_task1.ag8_40323131)
app.register_blueprint(users.s2a.g8.ag8_40323154_task1.ag8_40323154)
app.register_blueprint(users.s2a.g8.ag8_40323143_task1.ag8_40323143)
app.register_blueprint(users.s2a.g8.ag8_40323137_task1.ag8_40323137)

#g9
app.register_blueprint(users.s2a.g9.ag9.ag9)
app.register_blueprint(users.s2a.g9.ag9_40323132_task1.ag9_40323132)
app.register_blueprint(users.s2a.g9.ag9_40323125_task1.ag9_40323125)
app.register_blueprint(users.s2a.g9.ag9_40323126_task1.ag9_40323126)
app.register_blueprint(users.s2a.g9.ag9_40323153_task1.ag9_40323153)
app.register_blueprint(users.s2a.g9.ag9_40323149_task1.ag9_40323149)
app.register_blueprint(users.s2a.g9.ag9_40323150_task1.ag9_40323150)
# 二乙
#g1
app.register_blueprint(bg1_0.bg1)
app.register_blueprint(users.s2b.g1.scrum40123156_task1.scrum40123156_task1)
app.register_blueprint(users.s2b.g1.scrum40123126_task1.scrum40123126_task1)
app.register_blueprint(users.s2b.g1.scrum40123129_task1.scrum40123129_task1)
app.register_blueprint(users.s2b.g1.scrum40123131_task1.scrum40123131_task1)
app.register_blueprint(users.s2b.g1.scrum40123133_task1.scrum40123133_task1)
app.register_blueprint(users.s2b.g1.scrum40123144_task1.scrum40123144_task1)
app.register_blueprint(users.s2b.g1.scrum40123134_task1.scrum40123134_task1)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
app.register_blueprint(users.s2b.g1.bg1_task1.bg1_task1)

=======
app.register_blueprint(users.s2b.g1.scrum40123134_task1.bg1_task1)
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
# 註冊各組的程式 (第3步/總共3步, 前面1步為 import ag1)
app.register_blueprint(users.s2b.g2.task0.bg2)

#g2
app.register_blueprint(users.s2b.g2.scrum1_task40123235.scrum1_task40123235)
app.register_blueprint(users.s2b.g2.scrum2_task40123202.scrum2_task40123202)
app.register_blueprint(users.s2b.g2.scrum2_task40123214.scrum2_task40123214)
app.register_blueprint(users.s2b.g2.scrum2_task40123217.scrum2_task40123217)
app.register_blueprint(users.s2b.g2.scrum2_task40123226.scrum2_task40123226)
app.register_blueprint(users.s2b.g2.scrum2_task40123232.scrum2_task40123232)
app.register_blueprint(users.s2b.g2.scrum2_task40123235.scrum2_task40123235)
app.register_blueprint(users.s2b.g2.scrum2_task40123244.scrum2_task40123244)
#g3
app.register_blueprint(users.s2b.g3.scrum1_task40123250.scrum1_task40123250)
app.register_blueprint(users.s2b.g3.scrum2_task40123224.scrum2_task40123224)
app.register_blueprint(users.s2b.g3.scrum2_task40123239.scrum2_task40123239)
app.register_blueprint(users.s2b.g3.scrum2_task40123242.scrum2_task40123242)
app.register_blueprint(users.s2b.g3.scrum2_task40123250.scrum2_task40123250)
app.register_blueprint(users.s2b.g3.scrum3_task40123224.scrum3_task40123224)
app.register_blueprint(users.s2b.g3.scrum3_task40123242.scrum3_task40123242)
app.register_blueprint(users.s2b.g3.scrum3_task40123250.scrum3_task40123250)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g4 
app.register_blueprint(users.s2b.g4.task0.bg4)
=======
#g4
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
app.register_blueprint(users.s2b.g4.scrum1_task40323201.scrum1_task40323201)
app.register_blueprint(users.s2b.g4.scrum2_task40323202.scrum2_task40323202)
app.register_blueprint(users.s2b.g4.scrum3_task40323203.scrum3_task40323203)
app.register_blueprint(users.s2b.g4.scrum4_task40323205.scrum4_task40323205)
app.register_blueprint(users.s2b.g4.scrum5_task40323208.scrum5_task40323208)
app.register_blueprint(users.s2b.g4.scrum6_task40123128.scrum6_task40123128)
#g5 
app.register_blueprint(users.s2b.g5.scrum1_task40323204.scrum1_task40323204)
app.register_blueprint(users.s2b.g5.scrum2_task40323206.scrum2_task40323206)
app.register_blueprint(users.s2b.g5.scrum3_task40323217.scrum3_task40323217)
app.register_blueprint(users.s2b.g5.scrum4_task40323251.scrum4_task40323251)
app.register_blueprint(users.s2b.g5.scrum5_task40323253.scrum5_task40323253)
app.register_blueprint(users.s2b.g5.scrum6_task40323255.scrum6_task40323255)
#g6
app.register_blueprint(users.s2b.g6.scrum1_task40323210.scrum1_task40323210)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
app.register_blueprint(users.s2b.g6.task0.bg6)
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g7
app.register_blueprint(users.s2b.g7.scrum1_task40323212.scrum1_task40323212)
app.register_blueprint(users.s2b.g7.scrum2_task40323216.scrum2_task40323216)
app.register_blueprint(users.s2b.g7.scrum3_task40323236.scrum3_task40323236)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g8
app.register_blueprint(users.s2b.g8.scrum1_task40323213.scrum1_task40323213)
app.register_blueprint(users.s2b.g8.scrum4_task40323237.scrum4_task40323237)
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g9
app.register_blueprint(users.s2b.g9.task0.bg9)
app.register_blueprint(users.s2b.g9.scrum1_task40323250.scrum1_task40323250)
app.register_blueprint(users.s2b.g9.scrum2_task40323218.scrum2_task40323218)
app.register_blueprint(users.s2b.g9.scrum4_task40323231.scrum4_task40323231)
app.register_blueprint(users.s2b.g9.scrum3_task40323214.scrum3_task40323214)
app.register_blueprint(users.s2b.g9.scrum5_task40323230.scrum5_task40323230)
app.register_blueprint(users.s2b.g9.scrum6_task40323233.scrum6_task40323233)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g10
app.register_blueprint(users.s2b.g10.task0.bg10) 
app.register_blueprint(users.s2b.g10.scrum1_task40328242.scrum1_task40328242)
app.register_blueprint(users.s2b.g10.scrum3_task40323222.scrum3_task40323222)
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g11
app.register_blueprint(users.s2b.g11.task0.bg11) 
app.register_blueprint(users.s2b.g11.scrum1_task40323245.scrum1_task40323245)
app.register_blueprint(users.s2b.g11.scrum2_task40323223.scrum1_task40323223)
app.register_blueprint(users.s2b.g11.scrum1_task40323240.scrum1_task40323240)
app.register_blueprint(users.s2b.g11.scrum1_task40323247.scrum1_task40323247)
app.register_blueprint(users.s2b.g11.scrum1_task40323252.scrum1_task40323252)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
</t>
<t tx="amd.20160501230850.1">app.register_blueprint(users.s2a.g3.scrum1_task40123254.scrum1_task40123254)
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g6
app.register_blueprint(users.s2a.g6.ag6.ag6)
</t>
<t tx="leo.20160502110937.2"></t>
<t tx="leo.20160502110937.3">(uncached) amd.20160501221001.2
Diff...
  # coding: utf-8
  from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
  import random
  import math
  import os
  # init.py 為自行建立的起始物件
  import init
  
- 
- import users.a.g8.ag8_40323131_task1
- import users.a.g8.ag8_40323131_task1b
- import users.a.g8.ag8_40323131_task1c
  # 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
  _curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
  # 設定在雲端與近端的資料儲存目錄
  if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
      # 表示程式在雲端執行
      data_dir = os.environ['OPENSHIFT_DATA_DIR']
      static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
      download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
  else:
      # 表示程式在近端執行
      data_dir = _curdir + "/local_data/"
      static_dir = _curdir + "/static"
      download_dir = _curdir + "/local_data/downloads/"
  
  # 利用 init.py 啟動, 建立所需的相關檔案
  initobj = init.Init()
  
  # 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
  app = Flask(__name__)
  #app.config['download_dir'] = download_dir
  
  # 使用 session 必須要設定 secret_key
  # In order to use sessions you have to set a secret key
  # set the secret key.  keep this really secret:
  app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'
  
  
  
  
  
  
  
</t>
<t tx="leo.20160502110937.4"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import math
import os
# init.py 為自行建立的起始物件
import init

# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
#app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'







</t>
<t tx="leo.20160502110937.5"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import math
import os
# init.py 為自行建立的起始物件
import init


import users.a.g8.ag8_40323131_task1
import users.a.g8.ag8_40323131_task1b
import users.a.g8.ag8_40323131_task1c
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
#app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'







</t>
<t tx="leo.20160505161227.2"></t>
<t tx="leo.20160505161227.3">(uncached) amd.20160501221001.2
Diff...
  # coding: utf-8
  from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
  import random
  import math
  import os
  # init.py 為自行建立的起始物件
  import init
  
  import users.a.g10.ag10_40323139
- import users.a.g4.ag4_40323138
  import users.a.g8.ag8_40323131_task1
- import users.b.g9.bg9_40323250
- import users.b.g11.bg11_40323245
  # 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
  _curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
  # 設定在雲端與近端的資料儲存目錄
  if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
      # 表示程式在雲端執行
      data_dir = os.environ['OPENSHIFT_DATA_DIR']
      static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
      download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
  else:
      # 表示程式在近端執行
      data_dir = _curdir + "/local_data/"
      static_dir = _curdir + "/static"
      download_dir = _curdir + "/local_data/downloads/"
  
  # 利用 init.py 啟動, 建立所需的相關檔案
  initobj = init.Init()
  
  # 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
  app = Flask(__name__)
  #app.config['download_dir'] = download_dir
  
  # 使用 session 必須要設定 secret_key
  # In order to use sessions you have to set a secret key
  # set the secret key.  keep this really secret:
  app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'
  
  
  
  
  
  
  
  
</t>
<t tx="leo.20160505161227.4"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import math
import os
# init.py 為自行建立的起始物件
import init

import users.a.g10.ag10_40323139
import users.a.g8.ag8_40323131_task1
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
#app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'








</t>
<t tx="leo.20160505161227.5"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import math
import os
# init.py 為自行建立的起始物件
import init

import users.a.g10.ag10_40323139
import users.a.g4.ag4_40323138
import users.a.g8.ag8_40323131_task1
import users.b.g9.bg9_40323250
import users.b.g11.bg11_40323245
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
#app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'








</t>
<t tx="leo.20160505172115.2"></t>
<t tx="leo.20160505172115.3">(uncached) amd.20160501221001.2
Diff...
  # coding: utf-8
  from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
  import random
  import math
  import os
  # init.py 為自行建立的起始物件
  import init
- 
+ import users.a.g5.ag5_40323116_task1
  import users.a.g10.ag10_40323139
  import users.a.g4.ag4_40323138
  import users.a.g8.ag8_40323131_task1
  import users.b.g9.bg9_40323250
  import users.b.g11.bg11_40323245
  # 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
  _curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
  # 設定在雲端與近端的資料儲存目錄
  if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
      # 表示程式在雲端執行
      data_dir = os.environ['OPENSHIFT_DATA_DIR']
      static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
      download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
  else:
      # 表示程式在近端執行
      data_dir = _curdir + "/local_data/"
      static_dir = _curdir + "/static"
      download_dir = _curdir + "/local_data/downloads/"
  
  # 利用 init.py 啟動, 建立所需的相關檔案
  initobj = init.Init()
  
  # 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
  app = Flask(__name__)
  #app.config['download_dir'] = download_dir
  
  # 使用 session 必須要設定 secret_key
  # In order to use sessions you have to set a secret key
  # set the secret key.  keep this really secret:
  app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'
  
  
  
  
  
  
  
  
</t>
<t tx="leo.20160505172115.4"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import math
import os
# init.py 為自行建立的起始物件
import init
import users.a.g5.ag5_40323116_task1
import users.a.g10.ag10_40323139
import users.a.g4.ag4_40323138
import users.a.g8.ag8_40323131_task1
import users.b.g9.bg9_40323250
import users.b.g11.bg11_40323245
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
#app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'








</t>
<t tx="leo.20160505172115.5"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import math
import os
# init.py 為自行建立的起始物件
import init

import users.a.g10.ag10_40323139
import users.a.g4.ag4_40323138
import users.a.g8.ag8_40323131_task1
import users.b.g9.bg9_40323250
import users.b.g11.bg11_40323245
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
#app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'








</t>
<t tx="leo.20160509101318.10">@app.route('/imageuploadform')
def imageuploadform():
    '''
    if not session.get('logged_in'):
        #abort(401)
        return redirect(url_for('login'))
    '''
    return "&lt;h1&gt;file upload&lt;/h1&gt;"+'''
  &lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script&gt;
  $(document).ready(function(){
  $('.prova').axuploader({url:'imageaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','swf'],
  finish:function(x,files)
{
    alert('All files have been uploaded: '+files);
},
  enable:true,
  remotePath:function(){
  return 'images/';
  }
  });
  });
  &lt;/script&gt;
  &lt;div class="prova"&gt;&lt;/div&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
  &lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
  &lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
  '''
</t>
<t tx="leo.20160509101318.11"></t>
<t tx="leo.20160509101318.12">(uncached) amd.20160501221001.15
Diff...
- # 註冊各組的程式 (第3步/總共3步, 前面1步為 import ag1)
- # 以下依照班別與組別次序註冊藍圖
- # 二甲
- # 註冊 ag100 的 scrum1_task1.py 檔案中的 scrum1_task1 藍圖
+ # setup static directory
+ @app.route('/images/&lt;path:path&gt;')
+ def send_images(path):
+     return send_from_directory(data_dir+"/images/", path)
</t>
<t tx="leo.20160509101318.13"># setup static directory
@app.route('/images/&lt;path:path&gt;')
def send_images(path):
    return send_from_directory(data_dir+"/images/", path)
</t>
<t tx="leo.20160509101318.14"># 註冊各組的程式 (第3步/總共3步, 前面1步為 import ag1)
# 以下依照班別與組別次序註冊藍圖
# 二甲
# 註冊 ag100 的 scrum1_task1.py 檔案中的 scrum1_task1 藍圖
</t>
<t tx="leo.20160509101318.15">(uncached) amd.20160501221001.16
Diff...
- app.register_blueprint(users.s2a.g100.scrum1_task1.scrum1_task1)
- # 註冊 ag100 的 scrum2_task1.py 檔案中的 scrum2_task1 藍圖
- app.register_blueprint(users.s2a.g100.scrum2_task1.scrum2_task1)
- &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
- #g3
+ # setup static directory
+ @app.route('/static/')
+ def send_static():
+   return app.send_static_file('index.html')
+ 
</t>
<t tx="leo.20160509101318.16"># setup static directory
@app.route('/static/')
def send_static():
  return app.send_static_file('index.html')

</t>
<t tx="leo.20160509101318.17">app.register_blueprint(users.s2a.g100.scrum1_task1.scrum1_task1)
# 註冊 ag100 的 scrum2_task1.py 檔案中的 scrum2_task1 藍圖
app.register_blueprint(users.s2a.g100.scrum2_task1.scrum2_task1)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g3
</t>
<t tx="leo.20160509101318.18">(uncached) amd.20160501230850.1
Diff...
- app.register_blueprint(users.s2a.g3.scrum1_task40123254.scrum1_task40123254)
- =======
- &gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
- #g6
- app.register_blueprint(users.s2a.g6.ag6.ag6)
+ # setup static directory
+ @app.route('/static/blog/')
+ def send_blog():
+   return app.send_static_file('blog/index.html')
+ 
</t>
<t tx="leo.20160509101318.19"># setup static directory
@app.route('/static/blog/')
def send_blog():
  return app.send_static_file('blog/index.html')

</t>
<t tx="leo.20160509101318.2"></t>
<t tx="leo.20160509101318.20">app.register_blueprint(users.s2a.g3.scrum1_task40123254.scrum1_task40123254)
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g6
app.register_blueprint(users.s2a.g6.ag6.ag6)
</t>
<t tx="leo.20160509101318.21">(uncached) amd.20160501225844.1
Diff...
+ # setup static directory
+ @app.route('/static/&lt;path:path&gt;')
+ def send_file(path):
+   return app.send_static_file(static_dir+path)
- app.register_blueprint(users.s2a.g6.ag6_40323112_task1.ag6_40323112)
- app.register_blueprint(users.s2a.g6.ag6_40323133_task1.ag6_40323133)
- app.register_blueprint(users.s2a.g6.ag6_40323147_task1.ag6_40323147)
- app.register_blueprint(users.s2a.g6.ag6_40323152_task1.ag6_40323152)
- app.register_blueprint(users.s2a.g6.ag6_40323155_task1.ag6_40323155)
- app.register_blueprint(users.s2a.g6.ag6_40323156_task1.ag6_40323156)
- #g8
- app.register_blueprint(users.s2a.g8.ag8_40323145_task1.ag8_40323145)
- app.register_blueprint(users.s2a.g8.ag8_40323123_task1.ag8_40323123)
- app.register_blueprint(users.s2a.g8.ag8_40323131_task1.ag8_40323131)
- app.register_blueprint(users.s2a.g8.ag8_40323154_task1.ag8_40323154)
- app.register_blueprint(users.s2a.g8.ag8_40323143_task1.ag8_40323143)
- app.register_blueprint(users.s2a.g8.ag8_40323137_task1.ag8_40323137)
  
- #g9
- app.register_blueprint(users.s2a.g9.ag9.ag9)
- app.register_blueprint(users.s2a.g9.ag9_40323132_task1.ag9_40323132)
- app.register_blueprint(users.s2a.g9.ag9_40323125_task1.ag9_40323125)
- app.register_blueprint(users.s2a.g9.ag9_40323126_task1.ag9_40323126)
- app.register_blueprint(users.s2a.g9.ag9_40323153_task1.ag9_40323153)
- app.register_blueprint(users.s2a.g9.ag9_40323149_task1.ag9_40323149)
- app.register_blueprint(users.s2a.g9.ag9_40323150_task1.ag9_40323150)
- # 二乙
- #g1
- app.register_blueprint(bg1_0.bg1)
- app.register_blueprint(users.s2b.g1.scrum40123156_task1.scrum40123156_task1)
- app.register_blueprint(users.s2b.g1.scrum40123126_task1.scrum40123126_task1)
- app.register_blueprint(users.s2b.g1.scrum40123129_task1.scrum40123129_task1)
- app.register_blueprint(users.s2b.g1.scrum40123131_task1.scrum40123131_task1)
- app.register_blueprint(users.s2b.g1.scrum40123133_task1.scrum40123133_task1)
- app.register_blueprint(users.s2b.g1.scrum40123144_task1.scrum40123144_task1)
- app.register_blueprint(users.s2b.g1.scrum40123134_task1.scrum40123134_task1)
- &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
- app.register_blueprint(users.s2b.g1.bg1_task1.bg1_task1)
- 
- =======
- app.register_blueprint(users.s2b.g1.scrum40123134_task1.bg1_task1)
- &gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
- # 註冊各組的程式 (第3步/總共3步, 前面1步為 import ag1)
- app.register_blueprint(users.s2b.g2.task0.bg2)
- 
- #g2
- app.register_blueprint(users.s2b.g2.scrum1_task40123235.scrum1_task40123235)
- app.register_blueprint(users.s2b.g2.scrum2_task40123202.scrum2_task40123202)
- app.register_blueprint(users.s2b.g2.scrum2_task40123214.scrum2_task40123214)
- app.register_blueprint(users.s2b.g2.scrum2_task40123217.scrum2_task40123217)
- app.register_blueprint(users.s2b.g2.scrum2_task40123226.scrum2_task40123226)
- app.register_blueprint(users.s2b.g2.scrum2_task40123232.scrum2_task40123232)
- app.register_blueprint(users.s2b.g2.scrum2_task40123235.scrum2_task40123235)
- app.register_blueprint(users.s2b.g2.scrum2_task40123244.scrum2_task40123244)
- #g3
- app.register_blueprint(users.s2b.g3.scrum1_task40123250.scrum1_task40123250)
- app.register_blueprint(users.s2b.g3.scrum2_task40123224.scrum2_task40123224)
- app.register_blueprint(users.s2b.g3.scrum2_task40123239.scrum2_task40123239)
- app.register_blueprint(users.s2b.g3.scrum2_task40123242.scrum2_task40123242)
- app.register_blueprint(users.s2b.g3.scrum2_task40123250.scrum2_task40123250)
- app.register_blueprint(users.s2b.g3.scrum3_task40123224.scrum3_task40123224)
- app.register_blueprint(users.s2b.g3.scrum3_task40123242.scrum3_task40123242)
- app.register_blueprint(users.s2b.g3.scrum3_task40123250.scrum3_task40123250)
- &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
- #g4 
- app.register_blueprint(users.s2b.g4.task0.bg4)
- =======
- #g4
- &gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
- app.register_blueprint(users.s2b.g4.scrum1_task40323201.scrum1_task40323201)
- app.register_blueprint(users.s2b.g4.scrum2_task40323202.scrum2_task40323202)
- app.register_blueprint(users.s2b.g4.scrum3_task40323203.scrum3_task40323203)
- app.register_blueprint(users.s2b.g4.scrum4_task40323205.scrum4_task40323205)
- app.register_blueprint(users.s2b.g4.scrum5_task40323208.scrum5_task40323208)
- app.register_blueprint(users.s2b.g4.scrum6_task40123128.scrum6_task40123128)
- #g5 
- app.register_blueprint(users.s2b.g5.scrum1_task40323204.scrum1_task40323204)
- app.register_blueprint(users.s2b.g5.scrum2_task40323206.scrum2_task40323206)
- app.register_blueprint(users.s2b.g5.scrum3_task40323217.scrum3_task40323217)
- app.register_blueprint(users.s2b.g5.scrum4_task40323251.scrum4_task40323251)
- app.register_blueprint(users.s2b.g5.scrum5_task40323253.scrum5_task40323253)
- app.register_blueprint(users.s2b.g5.scrum6_task40323255.scrum6_task40323255)
- #g6
- app.register_blueprint(users.s2b.g6.scrum1_task40323210.scrum1_task40323210)
- &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
- app.register_blueprint(users.s2b.g6.task0.bg6)
- =======
- &gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
- #g7
- app.register_blueprint(users.s2b.g7.scrum1_task40323212.scrum1_task40323212)
- app.register_blueprint(users.s2b.g7.scrum2_task40323216.scrum2_task40323216)
- app.register_blueprint(users.s2b.g7.scrum3_task40323236.scrum3_task40323236)
- &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
- #g8
- app.register_blueprint(users.s2b.g8.scrum1_task40323213.scrum1_task40323213)
- app.register_blueprint(users.s2b.g8.scrum4_task40323237.scrum4_task40323237)
- =======
- &gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
- #g9
- app.register_blueprint(users.s2b.g9.task0.bg9)
- app.register_blueprint(users.s2b.g9.scrum1_task40323250.scrum1_task40323250)
- app.register_blueprint(users.s2b.g9.scrum2_task40323218.scrum2_task40323218)
- app.register_blueprint(users.s2b.g9.scrum4_task40323231.scrum4_task40323231)
- app.register_blueprint(users.s2b.g9.scrum3_task40323214.scrum3_task40323214)
- app.register_blueprint(users.s2b.g9.scrum5_task40323230.scrum5_task40323230)
- app.register_blueprint(users.s2b.g9.scrum6_task40323233.scrum6_task40323233)
- &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
- #g10
- app.register_blueprint(users.s2b.g10.task0.bg10) 
- app.register_blueprint(users.s2b.g10.scrum1_task40328242.scrum1_task40328242)
- app.register_blueprint(users.s2b.g10.scrum3_task40323222.scrum3_task40323222)
- =======
- &gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
- #g11
- app.register_blueprint(users.s2b.g11.task0.bg11) 
- app.register_blueprint(users.s2b.g11.scrum1_task40323245.scrum1_task40323245)
- app.register_blueprint(users.s2b.g11.scrum2_task40323223.scrum1_task40323223)
- app.register_blueprint(users.s2b.g11.scrum1_task40323240.scrum1_task40323240)
- app.register_blueprint(users.s2b.g11.scrum1_task40323247.scrum1_task40323247)
- app.register_blueprint(users.s2b.g11.scrum1_task40323252.scrum1_task40323252)
- &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
</t>
<t tx="leo.20160509101318.22"># setup static directory
@app.route('/static/&lt;path:path&gt;')
def send_file(path):
  return app.send_static_file(static_dir+path)

</t>
<t tx="leo.20160509101318.23">app.register_blueprint(users.s2a.g6.ag6_40323112_task1.ag6_40323112)
app.register_blueprint(users.s2a.g6.ag6_40323133_task1.ag6_40323133)
app.register_blueprint(users.s2a.g6.ag6_40323147_task1.ag6_40323147)
app.register_blueprint(users.s2a.g6.ag6_40323152_task1.ag6_40323152)
app.register_blueprint(users.s2a.g6.ag6_40323155_task1.ag6_40323155)
app.register_blueprint(users.s2a.g6.ag6_40323156_task1.ag6_40323156)
#g8
app.register_blueprint(users.s2a.g8.ag8_40323145_task1.ag8_40323145)
app.register_blueprint(users.s2a.g8.ag8_40323123_task1.ag8_40323123)
app.register_blueprint(users.s2a.g8.ag8_40323131_task1.ag8_40323131)
app.register_blueprint(users.s2a.g8.ag8_40323154_task1.ag8_40323154)
app.register_blueprint(users.s2a.g8.ag8_40323143_task1.ag8_40323143)
app.register_blueprint(users.s2a.g8.ag8_40323137_task1.ag8_40323137)

#g9
app.register_blueprint(users.s2a.g9.ag9.ag9)
app.register_blueprint(users.s2a.g9.ag9_40323132_task1.ag9_40323132)
app.register_blueprint(users.s2a.g9.ag9_40323125_task1.ag9_40323125)
app.register_blueprint(users.s2a.g9.ag9_40323126_task1.ag9_40323126)
app.register_blueprint(users.s2a.g9.ag9_40323153_task1.ag9_40323153)
app.register_blueprint(users.s2a.g9.ag9_40323149_task1.ag9_40323149)
app.register_blueprint(users.s2a.g9.ag9_40323150_task1.ag9_40323150)
# 二乙
#g1
app.register_blueprint(bg1_0.bg1)
app.register_blueprint(users.s2b.g1.scrum40123156_task1.scrum40123156_task1)
app.register_blueprint(users.s2b.g1.scrum40123126_task1.scrum40123126_task1)
app.register_blueprint(users.s2b.g1.scrum40123129_task1.scrum40123129_task1)
app.register_blueprint(users.s2b.g1.scrum40123131_task1.scrum40123131_task1)
app.register_blueprint(users.s2b.g1.scrum40123133_task1.scrum40123133_task1)
app.register_blueprint(users.s2b.g1.scrum40123144_task1.scrum40123144_task1)
app.register_blueprint(users.s2b.g1.scrum40123134_task1.scrum40123134_task1)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
app.register_blueprint(users.s2b.g1.bg1_task1.bg1_task1)

=======
app.register_blueprint(users.s2b.g1.scrum40123134_task1.bg1_task1)
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
# 註冊各組的程式 (第3步/總共3步, 前面1步為 import ag1)
app.register_blueprint(users.s2b.g2.task0.bg2)

#g2
app.register_blueprint(users.s2b.g2.scrum1_task40123235.scrum1_task40123235)
app.register_blueprint(users.s2b.g2.scrum2_task40123202.scrum2_task40123202)
app.register_blueprint(users.s2b.g2.scrum2_task40123214.scrum2_task40123214)
app.register_blueprint(users.s2b.g2.scrum2_task40123217.scrum2_task40123217)
app.register_blueprint(users.s2b.g2.scrum2_task40123226.scrum2_task40123226)
app.register_blueprint(users.s2b.g2.scrum2_task40123232.scrum2_task40123232)
app.register_blueprint(users.s2b.g2.scrum2_task40123235.scrum2_task40123235)
app.register_blueprint(users.s2b.g2.scrum2_task40123244.scrum2_task40123244)
#g3
app.register_blueprint(users.s2b.g3.scrum1_task40123250.scrum1_task40123250)
app.register_blueprint(users.s2b.g3.scrum2_task40123224.scrum2_task40123224)
app.register_blueprint(users.s2b.g3.scrum2_task40123239.scrum2_task40123239)
app.register_blueprint(users.s2b.g3.scrum2_task40123242.scrum2_task40123242)
app.register_blueprint(users.s2b.g3.scrum2_task40123250.scrum2_task40123250)
app.register_blueprint(users.s2b.g3.scrum3_task40123224.scrum3_task40123224)
app.register_blueprint(users.s2b.g3.scrum3_task40123242.scrum3_task40123242)
app.register_blueprint(users.s2b.g3.scrum3_task40123250.scrum3_task40123250)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g4 
app.register_blueprint(users.s2b.g4.task0.bg4)
=======
#g4
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
app.register_blueprint(users.s2b.g4.scrum1_task40323201.scrum1_task40323201)
app.register_blueprint(users.s2b.g4.scrum2_task40323202.scrum2_task40323202)
app.register_blueprint(users.s2b.g4.scrum3_task40323203.scrum3_task40323203)
app.register_blueprint(users.s2b.g4.scrum4_task40323205.scrum4_task40323205)
app.register_blueprint(users.s2b.g4.scrum5_task40323208.scrum5_task40323208)
app.register_blueprint(users.s2b.g4.scrum6_task40123128.scrum6_task40123128)
#g5 
app.register_blueprint(users.s2b.g5.scrum1_task40323204.scrum1_task40323204)
app.register_blueprint(users.s2b.g5.scrum2_task40323206.scrum2_task40323206)
app.register_blueprint(users.s2b.g5.scrum3_task40323217.scrum3_task40323217)
app.register_blueprint(users.s2b.g5.scrum4_task40323251.scrum4_task40323251)
app.register_blueprint(users.s2b.g5.scrum5_task40323253.scrum5_task40323253)
app.register_blueprint(users.s2b.g5.scrum6_task40323255.scrum6_task40323255)
#g6
app.register_blueprint(users.s2b.g6.scrum1_task40323210.scrum1_task40323210)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
app.register_blueprint(users.s2b.g6.task0.bg6)
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g7
app.register_blueprint(users.s2b.g7.scrum1_task40323212.scrum1_task40323212)
app.register_blueprint(users.s2b.g7.scrum2_task40323216.scrum2_task40323216)
app.register_blueprint(users.s2b.g7.scrum3_task40323236.scrum3_task40323236)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g8
app.register_blueprint(users.s2b.g8.scrum1_task40323213.scrum1_task40323213)
app.register_blueprint(users.s2b.g8.scrum4_task40323237.scrum4_task40323237)
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g9
app.register_blueprint(users.s2b.g9.task0.bg9)
app.register_blueprint(users.s2b.g9.scrum1_task40323250.scrum1_task40323250)
app.register_blueprint(users.s2b.g9.scrum2_task40323218.scrum2_task40323218)
app.register_blueprint(users.s2b.g9.scrum4_task40323231.scrum4_task40323231)
app.register_blueprint(users.s2b.g9.scrum3_task40323214.scrum3_task40323214)
app.register_blueprint(users.s2b.g9.scrum5_task40323230.scrum5_task40323230)
app.register_blueprint(users.s2b.g9.scrum6_task40323233.scrum6_task40323233)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g10
app.register_blueprint(users.s2b.g10.task0.bg10) 
app.register_blueprint(users.s2b.g10.scrum1_task40328242.scrum1_task40328242)
app.register_blueprint(users.s2b.g10.scrum3_task40323222.scrum3_task40323222)
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g11
app.register_blueprint(users.s2b.g11.task0.bg11) 
app.register_blueprint(users.s2b.g11.scrum1_task40323245.scrum1_task40323245)
app.register_blueprint(users.s2b.g11.scrum2_task40323223.scrum1_task40323223)
app.register_blueprint(users.s2b.g11.scrum1_task40323240.scrum1_task40323240)
app.register_blueprint(users.s2b.g11.scrum1_task40323247.scrum1_task40323247)
app.register_blueprint(users.s2b.g11.scrum1_task40323252.scrum1_task40323252)
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
</t>
<t tx="leo.20160509101318.3">(uncached) amd.20160501221001.2
Diff...
  # coding: utf-8
  from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
  import random
  import math
  import os
  # init.py 為自行建立的起始物件
  import init
- 
- # 導入各組的程式 (第2步/總共3步, 前面1步利用 Blueprint 建立於 users 目錄下的 task0.py 中的連結對應方法)
- # 以下依照班別與組別導入模組
- # 二甲
- # 導入 ag100 所屬的模組
- import users.s2a.g100.scrum1_task1
- import users.s2a.g100.scrum2_task1
- &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
- #g3
- import users.s2a.g3.scrum1_task40123254
- =======
- &gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
- #g6
- import users.s2a.g6.ag6
- import users.s2a.g6.ag6_40323112_task1
?              --   ^   ^        ^
+ import users.a.g5.ag5_40323116_task1
?                 ^   ^        ^
+ import users.a.g10.ag10_40323139
- import users.s2a.g6.ag6_40323133_task1
?              --   ^   ^        ^^^^^^^
+ import users.a.g4.ag4_40323138
?                 ^   ^        ^
- import users.s2a.g6.ag6_40323147_task1
- import users.s2a.g6.ag6_40323152_task1
- import users.s2a.g6.ag6_40323155_task1
- import users.s2a.g6.ag6_40323156_task1
- #g8
- import users.s2a.g8.ag8_40323131_task1
?              --
+ import users.a.g8.ag8_40323131_task1
- import users.s2a.g8.ag8_40323123_task1
- import users.s2a.g8.ag8_40323145_task1
- import users.s2a.g8.ag8_40323154_task1
- import users.s2a.g8.ag8_40323143_task1
- import users.s2a.g8.ag8_40323137_task1
- import users.s2a.g8.ag8
- #g9
- import users.s2a.g9.ag9
- import users.s2a.g9.ag9_40323132_task1
- import users.s2a.g9.ag9_40323125_task1
?              ^^^    ^        -  ^^^^^^
+ import users.b.g9.bg9_40323250
?              ^    ^          ^
- import users.s2a.g9.ag9_40323126_task1
- import users.s2a.g9.ag9_40323153_task1
- import users.s2a.g9.ag9_40323149_task1
- import users.s2a.g9.ag9_40323150_task1
- # 二乙
- #g1
- import s2b_files.task1.g1.task0 as bg1_0
- import users.s2b.g1.scrum40123156_task1
- import users.s2b.g1.scrum40123126_task1
- import users.s2b.g1.scrum40123129_task1
- import users.s2b.g1.scrum40123131_task1
- import users.s2b.g1.scrum40123133_task1
- import users.s2b.g1.scrum40123144_task1
- import users.s2b.g1.scrum40123134_task1
- import users.s2b.g1.bg1_task1
- #g2
- import users.s2b.g2.task0
- import users.s2b.g2.scrum1_task40123235
- import users.s2b.g2.scrum2_task40123202
- import users.s2b.g2.scrum2_task40123214
- import users.s2b.g2.scrum2_task40123217
- import users.s2b.g2.scrum2_task40123226
- import users.s2b.g2.scrum2_task40123232
- import users.s2b.g2.scrum2_task40123235
- import users.s2b.g2.scrum2_task40123244
- #g3
- import users.s2b.g3.task0
- import users.s2b.g3.scrum1_task40123250
- import users.s2b.g3.scrum2_task40123224
- import users.s2b.g3.scrum2_task40123239
- import users.s2b.g3.scrum2_task40123242
- import users.s2b.g3.scrum2_task40123250
- import users.s2b.g3.scrum3_task40123224
- import users.s2b.g3.scrum3_task40123242
- import users.s2b.g3.scrum3_task40123250
- #g4
- import users.s2b.g4.task0
- import users.s2b.g4.scrum1_task40323201
- import users.s2b.g4.scrum2_task40323202
- import users.s2b.g4.scrum3_task40323203
- import users.s2b.g4.scrum4_task40323205
- import users.s2b.g4.scrum5_task40323208
- import users.s2b.g4.scrum6_task40123128
- #g5
- import users.s2b.g5.task0
- import users.s2b.g5.scrum1_task40323204
- import users.s2b.g5.scrum2_task40323206
- import users.s2b.g5.scrum3_task40323217
- import users.s2b.g5.scrum4_task40323251
- import users.s2b.g5.scrum5_task40323253
- import users.s2b.g5.scrum6_task40323255
- 
- #g6
- import users.s2b.g6.task0
- import users.s2b.g6.scrum1_task40323210
- #g7
- import users.s2b.g7.task0
- import users.s2b.g7.scrum1_task40323212
- import users.s2b.g7.scrum2_task40323216
- import users.s2b.g7.scrum3_task40323236
- &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
- #g8
- import users.s2b.g8.scrum1_task40323213
- import users.s2b.g8.scrum4_task40323237
- =======
- &gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
- #g9
- import users.s2b.g9.task0
- import users.s2b.g9.scrum1_task40323250
- import users.s2b.g9.scrum2_task40323218
- import users.s2b.g9.scrum3_task40323214
- import users.s2b.g9.scrum4_task40323231
- import users.s2b.g9.scrum5_task40323230
- import users.s2b.g9.scrum6_task40323233
- &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
- 
- #g10
- import users.s2b.g10.task0
- import users.s2b.g10.scrum1_task40328242
- import users.s2b.g10.scrum3_task40323222
- 
- #g11
- import users.s2b.g11.task0
- import users.s2b.g11.scrum1_task40323245
?              --      ^^^^^  ----
+ import users.b.g11.bg11_40323245
?                    ^^^
- import users.s2b.g11.scrum2_task40323223
- import users.s2b.g11.scrum3_task40323240
- import users.s2b.g11.scrum4_task40323247
- import users.s2b.g11.scrum5_task40323252
- 
- =======
- &gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
  # 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
  _curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
  # 設定在雲端與近端的資料儲存目錄
  if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
      # 表示程式在雲端執行
      data_dir = os.environ['OPENSHIFT_DATA_DIR']
      static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
      download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
  else:
      # 表示程式在近端執行
      data_dir = _curdir + "/local_data/"
      static_dir = _curdir + "/static"
      download_dir = _curdir + "/local_data/downloads/"
  
  # 利用 init.py 啟動, 建立所需的相關檔案
  initobj = init.Init()
  
  # 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
  app = Flask(__name__)
  #app.config['download_dir'] = download_dir
  
  # 使用 session 必須要設定 secret_key
  # In order to use sessions you have to set a secret key
  # set the secret key.  keep this really secret:
  app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'
  
  
  
  
  
  
  
+ 
</t>
<t tx="leo.20160509101318.4"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import math
import os
# init.py 為自行建立的起始物件
import init
import users.a.g5.ag5_40323116_task1
import users.a.g10.ag10_40323139
import users.a.g4.ag4_40323138
import users.a.g8.ag8_40323131_task1
import users.b.g9.bg9_40323250
import users.b.g11.bg11_40323245
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
#app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'








</t>
<t tx="leo.20160509101318.5"># coding: utf-8
from flask import Flask, send_from_directory, request, redirect, render_template, session, make_response
import random
import math
import os
# init.py 為自行建立的起始物件
import init

# 導入各組的程式 (第2步/總共3步, 前面1步利用 Blueprint 建立於 users 目錄下的 task0.py 中的連結對應方法)
# 以下依照班別與組別導入模組
# 二甲
# 導入 ag100 所屬的模組
import users.s2a.g100.scrum1_task1
import users.s2a.g100.scrum2_task1
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g3
import users.s2a.g3.scrum1_task40123254
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g6
import users.s2a.g6.ag6
import users.s2a.g6.ag6_40323112_task1
import users.s2a.g6.ag6_40323133_task1
import users.s2a.g6.ag6_40323147_task1
import users.s2a.g6.ag6_40323152_task1
import users.s2a.g6.ag6_40323155_task1
import users.s2a.g6.ag6_40323156_task1
#g8
import users.s2a.g8.ag8_40323131_task1
import users.s2a.g8.ag8_40323123_task1
import users.s2a.g8.ag8_40323145_task1
import users.s2a.g8.ag8_40323154_task1
import users.s2a.g8.ag8_40323143_task1
import users.s2a.g8.ag8_40323137_task1
import users.s2a.g8.ag8
#g9
import users.s2a.g9.ag9
import users.s2a.g9.ag9_40323132_task1
import users.s2a.g9.ag9_40323125_task1
import users.s2a.g9.ag9_40323126_task1
import users.s2a.g9.ag9_40323153_task1
import users.s2a.g9.ag9_40323149_task1
import users.s2a.g9.ag9_40323150_task1
# 二乙
#g1
import s2b_files.task1.g1.task0 as bg1_0
import users.s2b.g1.scrum40123156_task1
import users.s2b.g1.scrum40123126_task1
import users.s2b.g1.scrum40123129_task1
import users.s2b.g1.scrum40123131_task1
import users.s2b.g1.scrum40123133_task1
import users.s2b.g1.scrum40123144_task1
import users.s2b.g1.scrum40123134_task1
import users.s2b.g1.bg1_task1
#g2
import users.s2b.g2.task0
import users.s2b.g2.scrum1_task40123235
import users.s2b.g2.scrum2_task40123202
import users.s2b.g2.scrum2_task40123214
import users.s2b.g2.scrum2_task40123217
import users.s2b.g2.scrum2_task40123226
import users.s2b.g2.scrum2_task40123232
import users.s2b.g2.scrum2_task40123235
import users.s2b.g2.scrum2_task40123244
#g3
import users.s2b.g3.task0
import users.s2b.g3.scrum1_task40123250
import users.s2b.g3.scrum2_task40123224
import users.s2b.g3.scrum2_task40123239
import users.s2b.g3.scrum2_task40123242
import users.s2b.g3.scrum2_task40123250
import users.s2b.g3.scrum3_task40123224
import users.s2b.g3.scrum3_task40123242
import users.s2b.g3.scrum3_task40123250
#g4
import users.s2b.g4.task0
import users.s2b.g4.scrum1_task40323201
import users.s2b.g4.scrum2_task40323202
import users.s2b.g4.scrum3_task40323203
import users.s2b.g4.scrum4_task40323205
import users.s2b.g4.scrum5_task40323208
import users.s2b.g4.scrum6_task40123128
#g5
import users.s2b.g5.task0
import users.s2b.g5.scrum1_task40323204
import users.s2b.g5.scrum2_task40323206
import users.s2b.g5.scrum3_task40323217
import users.s2b.g5.scrum4_task40323251
import users.s2b.g5.scrum5_task40323253
import users.s2b.g5.scrum6_task40323255

#g6
import users.s2b.g6.task0
import users.s2b.g6.scrum1_task40323210
#g7
import users.s2b.g7.task0
import users.s2b.g7.scrum1_task40323212
import users.s2b.g7.scrum2_task40323216
import users.s2b.g7.scrum3_task40323236
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
#g8
import users.s2b.g8.scrum1_task40323213
import users.s2b.g8.scrum4_task40323237
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
#g9
import users.s2b.g9.task0
import users.s2b.g9.scrum1_task40323250
import users.s2b.g9.scrum2_task40323218
import users.s2b.g9.scrum3_task40323214
import users.s2b.g9.scrum4_task40323231
import users.s2b.g9.scrum5_task40323230
import users.s2b.g9.scrum6_task40323233
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD

#g10
import users.s2b.g10.task0
import users.s2b.g10.scrum1_task40328242
import users.s2b.g10.scrum3_task40323222

#g11
import users.s2b.g11.task0
import users.s2b.g11.scrum1_task40323245
import users.s2b.g11.scrum2_task40323223
import users.s2b.g11.scrum3_task40323240
import users.s2b.g11.scrum4_task40323247
import users.s2b.g11.scrum5_task40323252

=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; e89a8e1c4ce1add6961e51c30a4712170e0a4ae8
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    static_dir = os.environ['OPENSHIFT_REPO_DIR']+"/static"
    download_dir = os.environ['OPENSHIFT_DATA_DIR']+"/downloads"
else:
    # 表示程式在近端執行
    data_dir = _curdir + "/local_data/"
    static_dir = _curdir + "/static"
    download_dir = _curdir + "/local_data/downloads/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
#app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'







</t>
<t tx="leo.20160509101318.6">(uncached) amd.20160501221001.12
Diff...
+ @app.route('/imageaxupload', methods=['POST'])
+ # ajax jquery chunked file upload for flask
+ def imageaxupload():
+     '''
+     if not session.get('logged_in'):
+         #abort(401)
+         return redirect(url_for('login'))
+     '''
+     # need to consider if the uploaded filename already existed.
+     # right now all existed files will be replaced with the new files
+     filename = request.args.get("ax-file-name")
+     flag = request.args.get("start")
+     if flag == "0":
+         file = open(data_dir+"images/"+filename, "wb")
+     else:
+         file = open(data_dir+"images/"+filename, "ab")
+     file.write(request.stream.read())
+     file.close()
+     return "image file uploaded!"
+ 
+     
+     
</t>
<t tx="leo.20160509101318.7">@app.route('/imageaxupload', methods=['POST'])
# ajax jquery chunked file upload for flask
def imageaxupload():
    '''
    if not session.get('logged_in'):
        #abort(401)
        return redirect(url_for('login'))
    '''
    # need to consider if the uploaded filename already existed.
    # right now all existed files will be replaced with the new files
    filename = request.args.get("ax-file-name")
    flag = request.args.get("start")
    if flag == "0":
        file = open(data_dir+"images/"+filename, "wb")
    else:
        file = open(data_dir+"images/"+filename, "ab")
    file.write(request.stream.read())
    file.close()
    return "image file uploaded!"

    
    
</t>
<t tx="leo.20160509101318.8"></t>
<t tx="leo.20160509101318.9">(uncached) amd.20160501221001.13
Diff...
+ @app.route('/imageuploadform')
+ def imageuploadform():
+     '''
+     if not session.get('logged_in'):
+         #abort(401)
+         return redirect(url_for('login'))
+     '''
+     return "&lt;h1&gt;file upload&lt;/h1&gt;"+'''
+   &lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
+   &lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
+   &lt;script&gt;
+   $(document).ready(function(){
+   $('.prova').axuploader({url:'imageaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','swf'],
+   finish:function(x,files)
+ {
+     alert('All files have been uploaded: '+files);
+ },
+   enable:true,
+   remotePath:function(){
+   return 'images/';
+   }
+   });
+   });
+   &lt;/script&gt;
+   &lt;div class="prova"&gt;&lt;/div&gt;
+   &lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
+   &lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
+   &lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
+   '''
</t>
<t tx="leo.20160616155638.1">&lt;script type="text/javascript" src="http://brython.info/src/brython_dist.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/Cango-8v03.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/Cango2D-7v01-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/CangoAxes-1v33.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/flintlockPartDefs-02.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="http://2015fallhw.github.io/cptocadp/static/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;canvas id='gear1' width='800' height='750'&gt;&lt;/canvas&gt;
 
&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
# 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換
from javascript import JSConstructor
import math

 
# 主要用來取得畫布大小
canvas = doc["gear1"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
ctx = canvas.getContext("2d")
# 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件
cango = JSConstructor(window.Cango)
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = JSConstructor(window.Cobj)
creategeartooth = JSConstructor(window.createGearTooth)
 
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="plotarea" 的 canvas 上
cgo = cango("gear1")
 
######################################
# 畫正齒輪輪廓
#####################################
def spur(cx,cy,m,n,pa):
    # pr 為節圓半徑
    #pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)
    gearTooth = cobj(data, "SHAPE", {
            "fillColor":"#ddd0dd",
            "border": True,
            "strokeColor": "#606060" })
    gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)
     
    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
        gear.appendPath(newTooth, True) # trim move command = True
     
    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = cobj(shapedefs.circle(hr), "PATH")
    shaft.revWinding()
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
    #cx = canvas.width/2
    #cy = canvas.height/2
    gear.translate(cx, cy)
    # render 繪出靜態正齒輪輪廓
    cgo.render(gear)
    deg=math.pi/180
    Line=cobj(['M',cx,cy,'L',\
                    cx+pr*math.cos(180/n*deg),\
                    cy+pr*math.sin(180/n*deg)],"PATH",{\
                    'strokeColor':'blue','lineWidth':4})
    cgo.render(Line)
cx = canvas.width/2
cy = canvas.height/2
# n 為齒數
n = 17
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n/5
pr = n*m/2 # gear Pitch radius
spur(cx-105,cy,m,n,pa)
spur(cx,cy,m,11,pa)
spur(cx+92,cy,m,13,pa)
&lt;/script&gt;</t>
<t tx="leo.20160616155712.1">from flask import Blueprint, request
 
ag5_16 = Blueprint('ag5_16', __name__, url_prefix='/ag5_16', template_folder='templates')


head_str = '''
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;網際 2D 繪圖&lt;/title&gt;
    &lt;!-- IE 9: display inline SVG --&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=9"&gt;

&lt;script type="text/javascript" src="http://cptocadp-2015fallhw.rhcloud.com/static/Cango-8v03.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://cptocadp-2015fallhw.rhcloud.com/static/Cango2D-6v13.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://cptocadp-2015fallhw.rhcloud.com/static/CangoAxes-1v33.js"&gt;&lt;/script&gt;
 
&lt;/head&gt;
&lt;body&gt;
 
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
 
&lt;canvas id="plotarea" width="800" height="800"&gt;&lt;/canvas&gt;
'''
 
tail_str = '''
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
 
chain_str = '''
&lt;script type="text/python"&gt;
from javascript import JSConstructor
from browser import alert
from browser import window
import math
 
cango = JSConstructor(window.Cango)
cobj = JSConstructor(window.Cobj)
shapedefs = window.shapeDefs
obj2d = JSConstructor(window.Obj2D)
cgo = cango("plotarea")
 
cgo.setWorldCoords(-250, -250, 500, 500) 
 
# 畫軸線
cgo.drawAxes(0, 240, 0, 240, {
    "strokeColor":"#aaaaaa",
    "fillColor": "#aaaaaa",
    "xTickInterval": 20,
    "xLabelInterval": 20,
    "yTickInterval": 20,
    "yLabelInterval": 20})
 
deg = math.pi/180  
 
# 將繪製鏈條輪廓的內容寫成 class 物件
class chain():
    # 輪廓的外型設為 class variable
    chamber = "M -6.8397, -1.4894 \
            A 7, 7, 0, 1, 0, 6.8397, -1.4894 \
            A 40, 40, 0, 0, 1, 6.8397, -18.511 \
            A 7, 7, 0, 1, 0, -6.8397, -18.511 \
            A 40, 40, 0, 0, 1, -6.8397, -1.4894 z"
    #chamber = "M 0, 0 L 0, -20 z"
    cgoChamber = window.svgToCgoSVG(chamber)
 
    def __init__(self, fillcolor="green", border=True, strokecolor= "tan", linewidth=2, scale=1):
        self.fillcolor = fillcolor
        self.border = border
        self.strokecolor = strokecolor
        self.linewidth = linewidth
        self.scale = scale
 
    # 利用鏈條起點與終點定義繪圖
    def basic(self, x1, y1, x2, y2):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        # 注意, cgo.Chamber 為成員變數
        cmbr = cobj(self.cgoChamber, "SHAPE", {
                "fillColor": self.fillcolor,
                "border": self.border,
                "strokeColor": self.strokecolor,
                "lineWidth": self.linewidth })
 
        # hole 為原點位置
        hole = cobj(shapedefs.circle(4*self.scale), "PATH")
        cmbr.appendPath(hole)
 
        # 複製 cmbr, 然後命名為 basic1
        basic1 = cmbr.dup()
        # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角
        basic1.rotate(math.atan2(y2-y1, x2-x1)/deg+90)
 
        # 放大 scale 倍
        cgo.render(basic1, x1, y1, self.scale, 0)
 
    # 利用鏈條起點與旋轉角度定義繪圖, 使用內定的 color, border 與 linewidth 變數
    def basic_rot(self, x1, y1, rot, v=False):
        # 若 v 為 True 則為虛擬 chain, 不 render
        self.x1 = x1
        self.y1 = y1
        self.rot = rot
        self.v = v
        # 注意, cgoChamber 為成員變數
        cmbr = cobj(self.cgoChamber, "SHAPE", {
                "fillColor": self.fillcolor,
                "border": self.border,
                "strokeColor": self.strokecolor,
                "lineWidth": self.linewidth })
 
        # hole0 為原點位置
        hole = cobj(shapedefs.circle(4*self.scale), "PATH")
        cmbr.appendPath(hole)
        # 根據旋轉角度, 計算 x2 與 y2
        x2 = x1 + 20*math.cos(rot*deg)*self.scale
        y2 = y1 + 20*math.sin(rot*deg)*self.scale
 
        # 複製 cmbr, 然後命名為 basic1
        basic1 = cmbr.dup()
        # 因為鏈條的角度由原點向下垂直, 所以必須轉 90 度, 再考量 atan2 的轉角
        basic1.rotate(rot+90)
 
        # 放大 scale 倍
        if v == False:
            cgo.render(basic1, x1, y1, self.scale, 0)
 
        return x2, y2
'''
 
</t>
</tnodes>
</leo_file>
